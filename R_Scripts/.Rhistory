activate(nodes) %>%
as_tibble() %>%
filter(group == "|s4|/|NC|") %>%
rownames() %>%
as.numeric()
# First get the edge types from original s4 connections
original_edge_types <- combined_network %>%
activate(edges) %>%
as_tibble() %>%
# Get edges connected to our s4 nodes
filter(to %in% which(combined_network %>% activate(nodes) %>%
as_tibble() %>%
filter(group == "s4") %>%
pull(name) %in% diff_combined_nodes$name)) %>%
select(to, original_type = type)
# Create a mapping between s4 node indices and their original edge types
type_mapping <- original_edge_types %>%
distinct(to, original_type) %>%
deframe()  # Convert to named vector
# Add edges safely
diff_combined_network <- diff_combined_network %>%
bind_edges(
tibble(
from = ratio_nodes,
to = s4_nodes,
type = coalesce(type_mapping[as.character(s4_nodes)], "gene_diff"),
weight = 1 # Optional: add edge weights
)
)
test3 <- diff_combined_network %>%
activate(nodes) %>%
as_tibble()
# Create tibbles to easily debug networks
top_doc_nodes <- top_doc_network %>%
activate(nodes) %>%
as_tibble()
top_doc_edges <- top_doc_network %>%
activate(edges) %>%
as_tibble()
doc_doc_nodes <- doc_doc_network %>%
activate(nodes) %>%
as_tibble()
doc_doc_edges <- doc_doc_network %>%
activate(edges) %>%
as_tibble()
top_top_nodes <- topic_network %>%
activate(nodes) %>%
as_tibble()
top_top_edges <- topic_network %>%
activate(edges) %>%
as_tibble()
combined_network_nodes <- combined_network%>%
activate(nodes) %>%
as_tibble()
combined_network_edges <- combined_network %>%
activate(edges) %>%
as_tibble()
combined_graph_edges <- combined_graph %>%
activate(edges) %>%
as_tibble()
combined_graph_nodes <- combined_graph %>%
activate(nodes) %>%
as_tibble()
diff_combined_network_nodes <- diff_combined_network %>%
activate(nodes) %>%
as_tibble()
diff_combined_network_edges <- diff_combined_network %>%
activate(edges) %>%
as_tibble()
# create updated network (ChatGPT generated)
# Step 1: Separate gene nodes (type == 'document') and topic nodes
gene_nodes <- diff_combined_network_nodes %>% filter(type == "document")
topic_nodes <- diff_combined_network_nodes %>% filter(type != "document")
# Step 2: Aggregate gene nodes by 'name'
agg_gene_nodes <- gene_nodes %>%
group_by(name) %>%
summarise(
across(where(is.numeric) & !c("node_size"), mean, na.rm = TRUE),
group = first(group),
type = first(type),
node_type = first(node_type),
.groups = 'drop'
) %>%
mutate(node_size = 2.0)  # Assign constant or derived node size
# Step 3: Combine with topic nodes and assign new node IDs
new_nodes <- bind_rows(agg_gene_nodes, topic_nodes) %>%
mutate(new_id = row_number())
# Step 4: Map original node row numbers to names
original_node_map <- diff_combined_network_nodes %>%
mutate(orig_id = row_number()) %>%
select(orig_id, name)
# Create name-to-new ID mapping
name_to_new_id <- new_nodes %>%
select(name, new_id)
# Step 5: Remap edge node indices based on name
updated_edges <- diff_combined_network_edges %>%
left_join(original_node_map, by = c("from" = "orig_id")) %>%
rename(from_name = name) %>%
left_join(original_node_map, by = c("to" = "orig_id")) %>%
rename(to_name = name) %>%
left_join(name_to_new_id, by = c("from_name" = "name")) %>%
rename(new_from = new_id) %>%
left_join(name_to_new_id, by = c("to_name" = "name")) %>%
rename(new_to = new_id) %>%
filter(!is.na(new_from) & !is.na(new_to)) %>%
mutate(from = new_from, to = new_to) %>%
select(from, to, everything(), -new_from, -new_to, -from_name, -to_name)
# Step 6: Build the new tidygraph object
diff_combined_network_aggregated <- tbl_graph(
nodes = new_nodes %>% select(-new_id),
edges = updated_edges,
directed = TRUE
)
diff_combined_network_aggregated <- diff_combined_network_aggregated %>%
activate(nodes) %>%
mutate(
community = case_when(
type == "topic" ~ as.numeric(str_extract(name, "\\d+"))/10,  # Extract topic numbers
TRUE ~ NA_real_  # Documents remain unassigned initially
)
)
diff_combined_network_aggregated_nodes <- diff_combined_network_aggregated %>%
activate(nodes) %>%
as_tibble()
diff_combined_network_aggregated_edges <- diff_combined_network_aggregated %>%
activate(edges) %>%
as_tibble()
rcc_network <- diff_combined_network_aggregated %>%
activate(nodes) %>%
mutate(
community = ifelse(
type == "document",
# Find the topic with highest edge weight for each document
edge_weights_to_topics <- .E()$weight[.N()$type == "topic"],
community  # Keep existing topic communities
)
)
# # Option B: Use community detection that respects topic assignments (Louvain with constraints)
# rcc_network <- rcc_network %>%
#   mutate(
#     community = group_louvain(weights = weight, constraints = ifelse(type == "topic", community, NA))
#   )
# Modify the nodes to cluster around the topic centers through definition of comunnity based on similarity using fuzzy community membership.
rcfc_network <- diff_combined_network_aggregated %>%
activate(nodes) %>%
mutate(
dominant_community = ifelse(
type == "document",
map_int(row_number(), ~{
# Get all connected topics
topics <- .E() %>%
as_tibble() %>%
filter(from == .x & .N()$type[to] == "topic") %>%
pull(to)
if (length(topics) == 0) {
NA_integer_  # Return NA if no topic connections
} else {
# Find topic with highest average weight
weights <- .E()$weight[.E()$from == .x & .E()$to %in% topics]
topics[which.max(weights)]
}
}),
community  # Keep original community for topics
)
)
# Visualizes
ggraph(combined_network, layout = "kk") +
geom_edge_link(aes(alpha = weight, width = weight),#, color = edge_color),
show.legend = FALSE) +
geom_node_point(aes(color = log2FoldChange, shape = group)) +
scale_edge_alpha(range = c(0.1, 0.5)) +
scale_edge_width(range = c(0.2, 1.5)) +
theme_graph() +
labs(size = "Centrality", color = "Group") +
guides(edge_alpha = "none", edge_width = "none")
rcc_network <- rcc_network %>%
activate(nodes) %>%
mutate(
ratio_test = ifelse(log2FoldChange > 1, "s4", "NC")
)
# Create tibbles for the difference combined network with fuzzy community (rcfc) membership
rcc_network_nodes <- rcc_network %>%
activate(nodes) %>%
as_tibble()
rcc_network_edges <- rcc_network %>%
activate(edges) %>%
as_tibble()
rcfc_network_nodes <- rcfc_network %>%
activate(nodes) %>%
as_tibble()
rcfc_network_edges <- rcfc_network %>%
activate(edges) %>%
as_tibble()
topic_size <- 5 #`alpha`
ggraph(rcc_network, layout = "kk") + #, pivots = 10) + #, weight = weight) +#, group = "community") + #, circular=TRUE) +
geom_edge_link(
aes(filter = type == "document_document",
alpha = weight*0.2,
color = "Document-Document"),
width = 0.1
) +
geom_edge_link(
aes(filter = type == "topic_document",
alpha = weight,
color = "Document-Topic"),
width = 0.5,
linetype = "dashed"
) +
geom_edge_link(
aes(filter = type == "term_term",
alpha = weight,
color = "Topic-Topic"),
width = 0.9
) +
geom_node_point(
aes(color = ratio_test, size = type)
) +
scale_color_manual(
name = "ratio_test",
values = c("s4" = "firebrick", "NC" = "darkblue") #c("document" = "darkblue", "topic" = "firebrick")
) +
scale_edge_color_manual(
name = "Edge Type",
values = c("Document-Document" = "darkblue", "Topic-Topic" = "firebrick",
"Document-Topic" = "darkgreen")
) +
geom_node_text(aes(label = ifelse(type == "topic", funcs, "")),
color = "black",
size = 3,
fontface = "bold",
repel = TRUE,
show.legend = FALSE) +
theme_graph() +
labs(title = "Multiplex Network: Documents, Topics, and Terms")
View(test3)
dtm <- analyzer$dtm
k <- analyzer$optimal_k
lda_model <- analyzer$lda_model
top_doc_network <- analyzer$build_topic_document_network(gamma_threshold = 0.1)
topic_network <- analyzer$build_topic_network()
doc_doc_network <- analyzer$build_document_network()
combined_network <- analyzer$combine_networks(gamma_threshold = 0.1,
dd_gamma_threshold = 0.95)
combined_network <- combined_network %>%
activate(nodes) %>%
filter(group != "WT")
#organized_layout <- analyzer$organize_nodes()
# Calculate the gene (name) difference between groups s4 and NC.
# This will help identify the genes that are unique to each group
# Calculate |s4|/|NC| ratios
diff_combined_nodes <- combined_network_nodes %>%
pivot_wider(
id_cols = name,
names_from = group,
values_from = log2FoldChange
) %>%
filter(!is.na(s4) & !is.na(NC)) %>%
mutate(
group = "|s4|/|NC|",
log2FoldChange = abs(s4)/abs(NC)
) %>%
select(name, group, log2FoldChange)
test_ratio <- diff_combined_nodes
# Add ratio nodes to graph
diff_combined_network <- combined_network %>%
bind_nodes(diff_combined_nodes)
test_2 <- diff_combined_network %>%
activate(nodes) %>%
as_tibble()
# Get node indices using node positions
s4_nodes <- diff_combined_network %>%
activate(nodes) %>%
as_tibble() %>%
filter(group == "s4" & name %in% diff_combined_nodes$name) %>%
rownames() %>%
as.numeric()
ratio_nodes <- diff_combined_network %>%
activate(nodes) %>%
as_tibble() %>%
filter(group == "|s4|/|NC|") %>%
rownames() %>%
as.numeric()
# First get the edge types from original s4 connections
original_edge_types <- combined_network %>%
activate(edges) %>%
as_tibble() %>%
# Get edges connected to our s4 nodes
filter(to %in% which(combined_network %>% activate(nodes) %>%
as_tibble() %>%
filter(group == "s4") %>%
pull(name) %in% diff_combined_nodes$name)) %>%
select(to, original_type = type)
# Create a mapping between s4 node indices and their original edge types
type_mapping <- original_edge_types %>%
distinct(to, original_type) %>%
deframe()  # Convert to named vector
# Add edges safely
diff_combined_network <- diff_combined_network %>%
bind_edges(
tibble(
from = ratio_nodes,
to = s4_nodes,
type = coalesce(type_mapping[as.character(s4_nodes)], "gene_diff"),
weight = 1 # Optional: add edge weights
)
)
test3 <- diff_combined_network %>%
activate(nodes) %>%
as_tibble()
# Create tibbles to easily debug networks
top_doc_nodes <- top_doc_network %>%
activate(nodes) %>%
as_tibble()
top_doc_edges <- top_doc_network %>%
activate(edges) %>%
as_tibble()
doc_doc_nodes <- doc_doc_network %>%
activate(nodes) %>%
as_tibble()
doc_doc_edges <- doc_doc_network %>%
activate(edges) %>%
as_tibble()
top_top_nodes <- topic_network %>%
activate(nodes) %>%
as_tibble()
top_top_edges <- topic_network %>%
activate(edges) %>%
as_tibble()
combined_network_nodes <- combined_network%>%
activate(nodes) %>%
as_tibble()
combined_network_edges <- combined_network %>%
activate(edges) %>%
as_tibble()
combined_graph_edges <- combined_graph %>%
activate(edges) %>%
as_tibble()
combined_graph_nodes <- combined_graph %>%
activate(nodes) %>%
as_tibble()
diff_combined_network_nodes <- diff_combined_network %>%
activate(nodes) %>%
as_tibble()
diff_combined_network_edges <- diff_combined_network %>%
activate(edges) %>%
as_tibble()
# create updated network (ChatGPT generated)
# Step 1: Separate gene nodes (type == 'document') and topic nodes
gene_nodes <- diff_combined_network_nodes %>% filter(type == "document")
topic_nodes <- diff_combined_network_nodes %>% filter(type != "document")
# Step 2: Aggregate gene nodes by 'name'
agg_gene_nodes <- gene_nodes %>%
group_by(name) %>%
summarise(
across(where(is.numeric) & !c("node_size"), mean, na.rm = TRUE),
group = first(group),
type = first(type),
node_type = first(node_type),
.groups = 'drop'
) %>%
mutate(node_size = 2.0)  # Assign constant or derived node size
# Step 3: Combine with topic nodes and assign new node IDs
new_nodes <- bind_rows(agg_gene_nodes, topic_nodes) %>%
mutate(new_id = row_number())
# Step 4: Map original node row numbers to names
original_node_map <- diff_combined_network_nodes %>%
mutate(orig_id = row_number()) %>%
select(orig_id, name)
# Create name-to-new ID mapping
name_to_new_id <- new_nodes %>%
select(name, new_id, log2FoldChange
)
# Step 5: Remap edge node indices based on name
updated_edges <- diff_combined_network_edges %>%
left_join(original_node_map, by = c("from" = "orig_id")) %>%
rename(from_name = name) %>%
left_join(original_node_map, by = c("to" = "orig_id")) %>%
rename(to_name = name) %>%
left_join(name_to_new_id, by = c("from_name" = "name")) %>%
rename(new_from = new_id) %>%
left_join(name_to_new_id, by = c("to_name" = "name")) %>%
rename(new_to = new_id) %>%
filter(!is.na(new_from) & !is.na(new_to)) %>%
mutate(from = new_from, to = new_to) %>%
select(from, to, everything(), -new_from, -new_to, -from_name, -to_name)
# Step 6: Build the new tidygraph object
diff_combined_network_aggregated <- tbl_graph(
nodes = new_nodes %>% select(-new_id),
edges = updated_edges,
directed = TRUE
)
diff_combined_network_aggregated <- diff_combined_network_aggregated %>%
activate(nodes) %>%
mutate(
community = case_when(
type == "topic" ~ as.numeric(str_extract(name, "\\d+"))/10,  # Extract topic numbers
TRUE ~ NA_real_  # Documents remain unassigned initially
)
)
diff_combined_network_aggregated_nodes <- diff_combined_network_aggregated %>%
activate(nodes) %>%
as_tibble()
diff_combined_network_aggregated_edges <- diff_combined_network_aggregated %>%
activate(edges) %>%
as_tibble()
rcc_network <- diff_combined_network_aggregated %>%
activate(nodes) %>%
mutate(
community = ifelse(
type == "document",
# Find the topic with highest edge weight for each document
edge_weights_to_topics <- .E()$weight[.N()$type == "topic"],
community  # Keep existing topic communities
)
)
# # Option B: Use community detection that respects topic assignments (Louvain with constraints)
# rcc_network <- rcc_network %>%
#   mutate(
#     community = group_louvain(weights = weight, constraints = ifelse(type == "topic", community, NA))
#   )
# Modify the nodes to cluster around the topic centers through definition of comunnity based on similarity using fuzzy community membership.
rcfc_network <- diff_combined_network_aggregated %>%
activate(nodes) %>%
mutate(
dominant_community = ifelse(
type == "document",
map_int(row_number(), ~{
# Get all connected topics
topics <- .E() %>%
as_tibble() %>%
filter(from == .x & .N()$type[to] == "topic") %>%
pull(to)
if (length(topics) == 0) {
NA_integer_  # Return NA if no topic connections
} else {
# Find topic with highest average weight
weights <- .E()$weight[.E()$from == .x & .E()$to %in% topics]
topics[which.max(weights)]
}
}),
community  # Keep original community for topics
)
)
# Visualizes
ggraph(combined_network, layout = "kk") +
geom_edge_link(aes(alpha = weight, width = weight),#, color = edge_color),
show.legend = FALSE) +
geom_node_point(aes(color = log2FoldChange, shape = group)) +
scale_edge_alpha(range = c(0.1, 0.5)) +
scale_edge_width(range = c(0.2, 1.5)) +
theme_graph() +
labs(size = "Centrality", color = "Group") +
guides(edge_alpha = "none", edge_width = "none")
rcc_network <- rcc_network %>%
activate(nodes) %>%
mutate(
ratio_test = ifelse(log2FoldChange > 1, "s4", "NC")
)
# Create tibbles for the difference combined network with fuzzy community (rcfc) membership
rcc_network_nodes <- rcc_network %>%
activate(nodes) %>%
as_tibble()
rcc_network_edges <- rcc_network %>%
activate(edges) %>%
as_tibble()
rcfc_network_nodes <- rcfc_network %>%
activate(nodes) %>%
as_tibble()
rcfc_network_edges <- rcfc_network %>%
activate(edges) %>%
as_tibble()
topic_size <- 5 #`alpha`
ggraph(rcc_network, layout = "kk") + #, pivots = 10) + #, weight = weight) +#, group = "community") + #, circular=TRUE) +
geom_edge_link(
aes(filter = type == "document_document",
alpha = weight*0.2,
color = "Document-Document"),
width = 0.1
) +
geom_edge_link(
aes(filter = type == "topic_document",
alpha = weight,
color = "Document-Topic"),
width = 0.5,
linetype = "dashed"
) +
geom_edge_link(
aes(filter = type == "term_term",
alpha = weight,
color = "Topic-Topic"),
width = 0.9
) +
geom_node_point(
aes(color = ratio_test, size = type)
) +
scale_color_manual(
name = "ratio_test",
values = c("s4" = "firebrick", "NC" = "darkblue") #c("document" = "darkblue", "topic" = "firebrick")
) +
scale_edge_color_manual(
name = "Edge Type",
values = c("Document-Document" = "darkblue", "Topic-Topic" = "firebrick",
"Document-Topic" = "darkgreen")
) +
geom_node_text(aes(label = ifelse(type == "topic", funcs, "")),
color = "black",
size = 3,
fontface = "bold",
repel = TRUE,
show.legend = FALSE) +
theme_graph() +
labs(title = "Multiplex Network: Documents, Topics, and Terms")
